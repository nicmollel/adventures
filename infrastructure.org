;;; -*- mode: org; fill-column: 72; -*-
#+TITLE:     Web Development, Infrastructure and More
#+AUTHOR:    Nic M
#+DATE:      June 2013
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/$
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
    
* On Web Development
** All Other Thoughts
   - Support *OAuth* with *OpenID*, *Google*, *Yahoo*
     + *Facebook* will be left out here because the target market. This
       might change if there appear to be a demand
   - Before I even got anything off the ground, I had to spend time
     and wrap my head around /ssh_config/ so that I can manage the
     different keys that I use for github. I finally learned the
     difference between *Host* and *Hostname* and how to use them
     correctly in conjunction. 
   - 
**  Infrastructure 
    + [X] Nginx
    + [X] Django
    + [X] PostgreSQL
    + [ ] Memcached 
** Getting Everyone to Play Nice Together
*** Nginx and Django
    - First make sure everything is uptodate. Also update *pip* to be
      sure the version in use is the latest.

      This is how to update *pip*
      #+BEGIN_CODE
      pip install --upgrade [packagename]
      #+END_CODE
      /packagename/ can be *pip* for a self update. 
    - another good option to know for *pip* is /--outdated/ 
    - FastCGI, i think I got it set up but now I need to wrap my head
      around *Nginx* configurations. I guess what I would like to know
      if I can have different instances of django or other services such
      as *hunchentoot* to run on the same server at the same time and
      server different applications.
    - I used *Django* documentations to get this done.
    - As of today, [2013-07-18 Thu], I have *Django* working with
      *Nginx* and *Bootstrap*. In the process I have learned few things
      about both *Django* and *Nginx* configurations especially with
      respect to static files which I needed to get done to have
      *Bootstrap* working
    - 
*** PostgreSQL 
    - [2013-07-21 Sun], Took me a good amount of the day but I managed
      to have *PostgreSQL* up and running in the form that I would like
      it to be. The next thing on my list now is to read on *Django*
      /models/ and /session and user management/. 
    - With these two pieces in place, I would expect to have a
      rudimentary version of /Academi/ or whatever it will be called at
      a later date
*** Django Models 
    - 
*** Nginx and Hunchentoot
    - I decided that I will have a *Hunchentoot* project to host my
      homepage and that will over time develop into a portfolio but also
      an experimental place for web tools I would like to see for
      personal use and maybe later for public use
    - The initial coupling is not in place and serves *Hunchentoot*
      welcome page. 
    - I also intend to build the stock simulator project on top on
      *Hunchentoot* but I have not put these pieces in place at the
      moment 
    - My idea is to work with *Hunchentoot*, *Bootstrap* and many other
      pieces I would need along the road. 
    - 
*** SBCL
    - I am attempting to participate in SBCL development and the first
      attempt has been to add some restarts to OPEN. This has exposed me
      to how the compiler interacts with the underlying OS but it also
      has been slow progress trying to figure out what's the best style
      and approach. I am hoping this will not be the last attempt but
      that a year from now I can look back and smile as where it all
      started! 
***  Misc
     - [2013-07-26 Fri], I printed all source code of ~CL-PPCRE~ as Xach
       and few other people have touted it as one of the programs which
       they thought the source was worth reading. I now have 100 pages
       of the source and I am debating whether to print them on paper or
       just upload them on my iPad. I think I will start with the iPad
       and see how that does...I can scribble notes and annotate the PDF
       on my iPad so I don't think it will be different from having
       actual printed pages!! The task is accomplished using ~enscript~
       and ~ps2pdf~. Here is the command to generate the pages which I
       would like to convert into a script I can pass few variable to be
       able to automate this
       #+BEGIN_SRC bash
       enscript -f "Courier9" -Eelisp --toc --header='$n' -e -o [output file] *.asd *.lisp
       #+END_SRC 
     - [2013-07-27 Sat], *Building CCL on Raspberry Pi*
       CCL is hosted in an ~svn~ repository. To check it out, run the
       following
       #+BEGIN_SRC
       svn co http://svn.clozure.com/publicsvn/openmcl/trunk/linuxarm/ccl
       #+END_SRC
       in the resulting directory, make sure ~FLOAT_ABI~ is set to
       /hard/ in ~[ccl top directory]/lisp-kernel/linuxarm/float_abi.mk~
       in this folder, run the commands ~make clean && make~ to rebuild
       the kernel. Then rebuild LISP sources with
       #+BEGIN_SRC lisp
       ./armcl
       ?(ccl:rebuild-ccl :full t)
       #+ENG_SRC 
       When updating from the repository, run ~svn update~ and repeat
       the steps above! 
     - 
